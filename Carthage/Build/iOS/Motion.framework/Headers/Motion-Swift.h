// Generated by Apple Swift version 4.2.1 effective-4.1.50 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Motion",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif




SWIFT_AVAILABILITY(ios,introduced=10)
@interface CALayer (SWIFT_EXTENSION(Motion)) <CAAnimationDelegate>
@end



@class CAAnimation;

@interface CALayer (SWIFT_EXTENSION(Motion))
/// Executed when an animation has started.
/// <ul>
///   <li>
///     _ anim: A CAAnimation.
///   </li>
/// </ul>
- (void)animationDidStart:(CAAnimation * _Nonnull)anim;
/// A delegation function that is executed when the backing layer stops
/// running an animation.
/// \param animation The CAAnimation instance that stopped running.
///
/// \param flag A boolean that indicates if the animation stopped
/// because it was completed or interrupted. True if completed, false
/// if interrupted.
///
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
@end






SWIFT_CLASS("_TtC6Motion6Motion")
@interface Motion : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



typedef SWIFT_ENUM_NAMED(NSInteger, MotionAnimationFillMode, "MotionAnimationFillMode", closed) {
  MotionAnimationFillModeForwards = 0,
  MotionAnimationFillModeBackwards = 1,
  MotionAnimationFillModeBoth = 2,
  MotionAnimationFillModeRemoved = 3,
};


SWIFT_CLASS("_TtC6Motion16MotionTransition")
@interface MotionTransition : NSObject
/// An initializer.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (id _Nullable)forwardingTargetForSelector:(SEL _Null_unspecified)aSelector SWIFT_WARN_UNUSED_RESULT;
- (BOOL)respondsToSelector:(SEL _Null_unspecified)aSelector SWIFT_WARN_UNUSED_RESULT;
@end

















@class UINavigationController;
@class UIViewController;
@protocol UIViewControllerAnimatedTransitioning;
@protocol UIViewControllerInteractiveTransitioning;

@interface MotionTransition (SWIFT_EXTENSION(Motion)) <UINavigationControllerDelegate>
- (id <UIViewControllerAnimatedTransitioning> _Nullable)navigationController:(UINavigationController * _Nonnull)navigationController animationControllerForOperation:(UINavigationControllerOperation)operation fromViewController:(UIViewController * _Nonnull)fromVC toViewController:(UIViewController * _Nonnull)toVC SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)navigationController:(UINavigationController * _Nonnull)navigationController interactionControllerForAnimationController:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animationController SWIFT_WARN_UNUSED_RESULT;
@end









@protocol UIViewControllerContextTransitioning;

@interface MotionTransition (SWIFT_EXTENSION(Motion)) <UIViewControllerAnimatedTransitioning>
/// The animation method that is used to coordinate the transition.
/// \param using transitionContext A UIViewControllerContextTransitioning.
///
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)context;
/// Returns the transition duration time interval.
/// \param using transitionContext An optional UIViewControllerContextTransitioning.
///
///
/// returns:
/// A TimeInterval that is the total animation time including delays.
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> _Nullable)transitionContext SWIFT_WARN_UNUSED_RESULT;
- (void)animationEnded:(BOOL)transitionCompleted;
@end

@class UITabBarController;

@interface MotionTransition (SWIFT_EXTENSION(Motion)) <UITabBarControllerDelegate>
- (BOOL)tabBarController:(UITabBarController * _Nonnull)tabBarController shouldSelectViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)tabBarController:(UITabBarController * _Nonnull)tabBarController interactionControllerForAnimationController:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animationController SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)tabBarController:(UITabBarController * _Nonnull)tabBarController animationControllerForTransitionFromViewController:(UIViewController * _Nonnull)fromVC toViewController:(UIViewController * _Nonnull)toVC SWIFT_WARN_UNUSED_RESULT;
@end




@interface MotionTransition (SWIFT_EXTENSION(Motion)) <UIViewControllerInteractiveTransitioning>
@property (nonatomic, readonly) BOOL wantsInteractiveStart;
- (void)startInteractiveTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
@end


@interface MotionTransition (SWIFT_EXTENSION(Motion)) <UIViewControllerTransitioningDelegate>
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForDismissal:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animator SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForPresentation:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animator SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_PROTOCOL_NAMED("MotionViewControllerDelegate")
@protocol MotionViewControllerDelegate
@optional
/// An optional delegation method that is executed motion will start the transition.
/// \param motion A MotionTransition instance.
///
/// \param willStartTransitionFrom viewController A UIViewController.
///
- (void)motionWillStartTransitionWithMotion:(MotionTransition * _Nonnull)motion;
/// An optional delegation method that is executed motion did end the transition.
/// \param motion A MotionTransition instance.
///
/// \param willStartTransitionFrom viewController A UIViewController.
///
- (void)motionDidEndTransitionWithMotion:(MotionTransition * _Nonnull)motion;
/// An optional delegation method that is executed motion did cancel the transition.
/// \param motion A MotionTransition instance.
///
/// \param willStartTransitionFrom viewController A UIViewController.
///
- (void)motionDidCancelTransitionWithMotion:(MotionTransition * _Nonnull)motion;
/// An optional delegation method that is executed when the source
/// view controller will start the transition.
/// \param motion A MotionTransition instance.
///
/// \param willStartTransitionFrom viewController A UIViewController.
///
- (void)motionWithMotion:(MotionTransition * _Nonnull)motion willStartTransitionFrom:(UIViewController * _Nonnull)viewController;
/// An optional delegation method that is executed when the source
/// view controller did end the transition.
/// \param motion A MotionTransition instance.
///
/// \param willStartTransitionFrom viewController A UIViewController.
///
- (void)motionWithMotion:(MotionTransition * _Nonnull)motion didEndTransitionFrom:(UIViewController * _Nonnull)viewController;
/// An optional delegation method that is executed when the source
/// view controller did cancel the transition.
/// \param motion A MotionTransition instance.
///
/// \param willStartTransitionFrom viewController A UIViewController.
///
- (void)motionWithMotion:(MotionTransition * _Nonnull)motion didCancelTransitionFrom:(UIViewController * _Nonnull)viewController;
/// An optional delegation method that is executed when the destination
/// view controller will start the transition.
/// \param motion A MotionTransition instance.
///
/// \param willStartTransitionFrom viewController A UIViewController.
///
- (void)motionWithMotion:(MotionTransition * _Nonnull)motion willStartTransitionTo:(UIViewController * _Nonnull)viewController;
/// An optional delegation method that is executed when the destination
/// view controller did end the transition.
/// \param motion A MotionTransition instance.
///
/// \param willStartTransitionFrom viewController A UIViewController.
///
- (void)motionWithMotion:(MotionTransition * _Nonnull)motion didEndTransitionTo:(UIViewController * _Nonnull)viewController;
/// An optional delegation method that is executed when the destination
/// view controller did cancel the transition.
/// \param motion A MotionTransition instance.
///
/// \param willStartTransitionFrom viewController A UIViewController.
///
- (void)motionWithMotion:(MotionTransition * _Nonnull)motion didCancelTransitionTo:(UIViewController * _Nonnull)viewController;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MotionViewOrderStrategy, "MotionViewOrderStrategy", closed) {
  MotionViewOrderStrategyAuto = 0,
  MotionViewOrderStrategySourceViewOnTop = 1,
  MotionViewOrderStrategyDestinationViewOnTop = 2,
};














@interface UIView (SWIFT_EXTENSION(Motion))
/// A boolean that indicates whether motion is enabled.
@property (nonatomic) BOOL isMotionEnabled;
/// A boolean that indicates whether motion is enabled.
@property (nonatomic) BOOL isMotionEnabledForSubviews;
/// An identifier value used to connect views across UIViewControllers.
@property (nonatomic, copy) NSString * _Nullable motionIdentifier;
@end




@interface UIViewController (SWIFT_EXTENSION(Motion))
/// Dismiss the current view controller with animation. Will perform a
/// navigationController.popViewController if the current view controller
/// is contained inside a navigationController
- (IBAction)motionDismissViewController;
/// Unwind to the root view controller using Motion.
- (IBAction)motionUnwindToRootViewController;
@end


@interface UIViewController (SWIFT_EXTENSION(Motion))
/// A boolean that indicates whether Motion is enabled or disabled.
@property (nonatomic) BOOL isMotionEnabled;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
